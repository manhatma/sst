"""Switch to UUID primary keys

Revision ID: 7f09aaaf3dbc
Revises: 705e4bb253c8
Create Date: 2024-01-29 13:10:57.765850

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '7f09aaaf3dbc'
down_revision = '705e4bb253c8'
branch_labels = None
depends_on = None


def upgrade():
    import uuid

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('calibration_method', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=False)

    with op.batch_alter_table('calibration', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=False)
        batch_op.alter_column('method_id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=False)

    with op.batch_alter_table('linkage', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=False)

    with op.batch_alter_table('session', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=False)
        batch_op.alter_column('setup_id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=False)
        batch_op.alter_column('track_id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=False)

    with op.batch_alter_table('session_html', schema=None) as batch_op:
        batch_op.alter_column('session_id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=False)

    with op.batch_alter_table('setup', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=False)
        batch_op.alter_column('linkage_id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=True)
        batch_op.alter_column('front_calibration_id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=True)
        batch_op.alter_column('rear_calibration_id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=True)

    with op.batch_alter_table('track', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=False)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=False)

    with op.batch_alter_table('board', schema=None) as batch_op:
        batch_op.alter_column('setup_id',
               existing_type=sa.INTEGER(),
               type_=sa.Uuid(),
               existing_nullable=True)

    # generate new identifiers
    conn = op.get_bind()
    for row in conn.execute(sa.text('SELECT id FROM calibration_method')).all():
        new_id = uuid.uuid4().hex
        conn.execute(sa.text(f"UPDATE calibration SET method_id='{new_id}' WHERE method_id={row.id}"))
        conn.execute(sa.text(f"UPDATE calibration_method SET id='{new_id}' WHERE id={row.id}"))

    for row in conn.execute(sa.text('SELECT id FROM calibration')).all():
        new_id = uuid.uuid4().hex
        conn.execute(sa.text(f"UPDATE setup SET front_calibration_id='{new_id}' WHERE front_calibration_id={row.id}"))
        conn.execute(sa.text(f"UPDATE setup SET rear_calibration_id='{new_id}' WHERE rear_calibration_id={row.id}"))
        conn.execute(sa.text(f"UPDATE calibration SET id='{new_id}' WHERE id={row.id}"))

    for row in conn.execute(sa.text('SELECT id FROM linkage')).all():
        new_id = uuid.uuid4().hex
        conn.execute(sa.text(f"UPDATE setup SET linkage_id='{new_id}' WHERE linkage_id={row.id}"))
        conn.execute(sa.text(f"UPDATE linkage SET id='{new_id}' WHERE id={row.id}"))

    for row in conn.execute(sa.text('SELECT id FROM session')).all():
        new_id = uuid.uuid4().hex
        conn.execute(sa.text(f"UPDATE session_html SET session_id='{new_id}' WHERE session_id={row.id}"))
        conn.execute(sa.text(f"UPDATE session SET id='{new_id}' WHERE id={row.id}"))

    for row in conn.execute(sa.text('SELECT id FROM setup')).all():
        new_id = uuid.uuid4().hex
        conn.execute(sa.text(f"UPDATE board SET setup_id='{new_id}' WHERE setup_id={row.id}"))
        conn.execute(sa.text(f"UPDATE session SET setup_id='{new_id}' WHERE setup_id={row.id}"))
        conn.execute(sa.text(f"UPDATE setup SET id='{new_id}' WHERE id={row.id}"))

    for row in conn.execute(sa.text('SELECT id FROM track')).all():
        new_id = uuid.uuid4().hex
        conn.execute(sa.text(f"UPDATE session SET track_id='{new_id}' WHERE track_id={row.id}"))
        conn.execute(sa.text(f"UPDATE track SET id='{new_id}' WHERE id={row.id}"))

    for row in conn.execute(sa.text('SELECT id FROM user')).all():
        new_id = uuid.uuid4().hex
        conn.execute(sa.text(f"UPDATE user SET id='{new_id}' WHERE id={row.id}"))

    # There are sessions wiht setup_id "0" (the ones imported from PSST files).
    # These sessions were not fixed with the previous queries, because setup with
    # 0 id does not exist in the database.
    conn.execute(sa.text("UPDATE session SET setup_id='00000000-0000-0000-0000-000000000000' WHERE setup_id=0"))

    # ### end Alembic commands ###


def downgrade():
    raise Exception("Irreversible migration")
